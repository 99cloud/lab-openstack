---

- name: Check cpu acceleration
  shell: "grep -qE '(vmx|svm)' /proc/cpuinfo;echo $?"
  register: cpu_acceleration

- name: Fail if acc is not enabled and supported
  fail:
    msg: "acc is not enabled and supported"
  when: cpu_acceleration.stdout != "0"

- name: Install virt-*
  yum:
    name: "{{ item }}"
  loop:
    - virt-install
    - virt-manager
    - cloud-utils
    - virt-viewer
    - bridge-utils
    # - iptables-services
    # - NetworkManager

- name: Enable & start service
  service:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - libvirtd
    # - iptables

- name: Enable ip forward function
  shell: "echo 1 > /proc/sys/net/ipv4/ip_forward"

- name: "cmd: ip link show type bridge"
  shell: "ip link show type bridge"
  register: check_result

- name: "Dump check_result.stdout_lines"
  debug:
    msg: "{{ check_result.stdout_lines }}"

# - name: Add linux bridge
#   command: "ip link add {{ item }} type bridge"
#   when: "item not in check_result.stdout"
#   loop:
#     - "br-mgt"
#     - "br-pod"
#     - "br-ext"
#     - "br-str"

# - name: Install bridge configure file
#   template:
#     src: "{{ item }}"
#     dest: /etc/sysconfig/network-scripts/{{ item }}
#   loop:
#     - ifcfg-br-ext
#     - ifcfg-br-mgt
#     - ifcfg-br-pod
#     - ifcfg-br-str

# - name: Restart NetworkManager
#   service:
#     name: NetworkManager
#     state: restarted

# - name: Create config file for linux bridge
#   shell: "ifup {{ item }}"
#   loop:
#     - br-ext
#     - br-mgt
#     - br-pod
#     - br-str

# https://www.linuxtechi.com/enable-nested-virtualization-kvm-centos-7-rhel-7/
- name: Touch /etc/modprobe.d/kvm-nested.conf
  copy:
    src: "kvm-nested.conf"
    dest: "/etc/modprobe.d/kvm-nested.conf"

- name: Enable KVM nested
  shell: "modprobe -r kvm_intel && modprobe -a kvm_intel"
  ignore_errors: yes

- name: ensure direcroty exists
  file:
    path: "{{ cloudlab_image_dir }}"
    state: "directory"
    mode: "0555"

- name: Check image exists
  stat:
    path: "{{ cloudlab_image_dir }}/{{ centos_local_file }}"
  register: stat_result

- name: Download images
  get_url:
    url: "{{ centos_remote_url }}"
    dest: "{{ cloudlab_image_dir }}/{{ centos_local_file }}"
  when: not stat_result.stat.exists

- name: Copy cloudinit to target
  template:
    src: "cloudinit.j2"
    dest: "{{ cloudlab_image_dir }}/cloudinit-{{ item }}.txt"
  loop: "{{ groups['vms'] }}"

- name: cloud-localds
  shell: "rm -rf {{ cloudlab_image_dir }}/cloudinit-{{ item }}.img && cloud-localds {{ cloudlab_image_dir }}/cloudinit-{{ item }}.img {{ cloudlab_image_dir }}/cloudinit-{{ item }}.txt"
  loop: "{{ groups['vms'] }}"

- name: ensure vm volume dir exists
  file:
    path: "{{ cloudlab_volume_dir }}"
    state: "directory"
    mode: "0555"

- name: Parepare disk
  shell: "[ ! -f {{ cloudlab_volume_dir }}/{{ item }}.qcow2 ] && qemu-img create -b {{ cloudlab_image_dir }}/{{ centos_local_file }} -f qcow2 {{ cloudlab_volume_dir }}/{{ item }}.qcow2 {{ hostvars[item]['sys_disk_size'] }}G || echo 0"
  loop: "{{ groups['vms'] }}"

- name: Create VM cmd
  debug:
    msg: "virt-install --name={{ item }} --ram={{ hostvars[item]['ram'] }} --vcpus={{ hostvars[item]['cpu'] }} --import --disk path={{ cloudlab_volume_dir }}/{{ item }}.qcow2,format=qcow2 --disk path={{ cloudlab_image_dir }}/cloudinit-{{ item }}.img,device=cdrom --os-variant=centos7.0 --network bridge=virbr0,model=virtio --check path_in_use=off --noautoconsole"
  loop: "{{ groups['vms'] }}"

# https://sumit-ghosh.com/articles/create-vm-using-libvirt-cloud-images-cloud-init/
# virsh list | grep node | awk '{print $2}' | xargs -I{} virsh shutdown {}
# virsh list --all | grep node | awk '{print $2}' | xargs -I{} virsh undefine --domain {} --remove-all-storage
- name: Create VM
  shell: "virt-install --name={{ item }} --ram={{ hostvars[item]['ram'] }} --vcpus={{ hostvars[item]['cpu'] }} --import --disk path={{ cloudlab_volume_dir }}/{{ item }}.qcow2,format=qcow2 --disk path={{ cloudlab_image_dir }}/cloudinit-{{ item }}.img,device=cdrom --os-variant=centos7.0 --network bridge=virbr0,model=virtio --check path_in_use=off --noautoconsole"
  loop: "{{ groups['vms'] }}"
