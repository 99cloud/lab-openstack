---

- name: ensure direcroty exists
  file:
    path: "{{ cloudlab_image_dir }}"
    state: "directory"
    mode: "0555"

- name: Check image exists
  stat:
    path: "{{ cloudlab_image_dir }}/{{ centos_local_file }}"
  register: stat_result

- name: Download images
  get_url:
    url: "{{ centos_remote_url }}"
    dest: "{{ cloudlab_image_dir }}/{{ centos_local_file }}"
  when: not stat_result.stat.exists

- name: Copy cloudinit to target
  template:
    src: "cloudinit.j2"
    dest: "{{ cloudlab_image_dir }}/cloudinit-{{ item }}.txt"
  loop: "{{ groups['vms'] }}"

- name: Copy metadata to target
  template:
    src: "metadata.j2"
    dest: "{{ cloudlab_image_dir }}/metadata-{{ item }}.txt"
  loop: "{{ groups['vms'] }}"

- name: cloud-localds
  shell: "rm -rf {{ cloudlab_image_dir }}/cloudinit-{{ item }}.img && cloud-localds {{ cloudlab_image_dir }}/cloudinit-{{ item }}.img {{ cloudlab_image_dir }}/cloudinit-{{ item }}.txt {{ cloudlab_image_dir }}/metadata-{{ item }}.txt"
  loop: "{{ groups['vms'] }}"

- name: ensure vm volume dir exists
  file:
    path: "{{ cloudlab_volume_dir }}"
    state: "directory"
    mode: "0555"

- name: Parepare disk
  shell: "[ ! -f {{ cloudlab_volume_dir }}/{{ item }}.qcow2 ] && qemu-img create -b {{ cloudlab_image_dir }}/{{ centos_local_file }} -f qcow2 {{ cloudlab_volume_dir }}/{{ item }}.qcow2 {{ hostvars[item]['sys_disk_size'] }}G || echo 0"
  loop: "{{ groups['vms'] }}"

- name: Create VM cmd
  debug:
    msg: "virt-install --name={{ item }} --ram={{ hostvars[item]['ram'] }} --vcpus={{ hostvars[item]['cpu'] }} --import --disk path={{ cloudlab_volume_dir }}/{{ item }}.qcow2,format=qcow2 --disk path={{ cloudlab_image_dir }}/cloudinit-{{ item }}.img,device=cdrom --os-variant=centos7.0 --network bridge=virbr0,model=virtio --check path_in_use=off --noautoconsole"
  loop: "{{ groups['vms'] }}"

# https://sumit-ghosh.com/articles/create-vm-using-libvirt-cloud-images-cloud-init/
# virsh list | grep node | awk '{print $2}' | xargs -I{} virsh shutdown {}
# virsh list --all | grep node | awk '{print $2}' | xargs -I{} virsh undefine --domain {} --remove-all-storage
# virsh list | grep running | awk '{print $2}' | xargs -I{} virsh snapshot-list {}
# virsh list | grep running | awk '{print $2}' | xargs -I{} virsh snapshot-delete {} --snapshotname {}.003-package
# virsh list | grep running | awk '{print $2}' | xargs -I{} virsh snapshot-create-as {} {}.006-after-install
# virsh list --all | grep node | awk '{print $2}' | xargs -I{} virsh snapshot-revert {} --snapshotname {}.006-after-install
- name: Create VM
  shell: "virt-install --name={{ item }} --ram={{ hostvars[item]['ram'] }} --vcpus={{ hostvars[item]['cpu'] }} --import --disk path={{ cloudlab_volume_dir }}/{{ item }}.qcow2,format=qcow2 --disk path={{ cloudlab_image_dir }}/cloudinit-{{ item }}.img,device=cdrom --os-variant=centos7.0 --network bridge=virbr0,model=virtio --check path_in_use=off --noautoconsole"
  loop: "{{ groups['vms'] }}"
  ignore_errors: yes
